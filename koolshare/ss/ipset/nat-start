#!/bin/sh
eval `dbus export shadowsocks`
eval `dbus export ss`
lan_ipaddr=$(nvram get lan_ipaddr)

# Different routers got different iptables syntax
case $(uname -m) in
  armv7l)
    MATCH_SET='--match-set'
    ;;
  mips)
    MATCH_SET='--set'
    ;;
esac

resolv_server_ip(){
	#server_ip=`resolvip $ss_basic_server`
	server_ip=`nslookup "$ss_basic_server" 114.114.114.114 | sed '1,4d' | awk '{print $3}' | grep -v :|awk 'NR==1{print}'`
	if [ -z "$shadowsocks_server_ip" ];then
	        if [ ! -z "$server_ip" ];then
	                export shadowsocks_server_ip="$server_ip"
	                ss_basic_server="$server_ip"
	                dbus save shadowsocks
	        fi
	else
	        if [ "$shadowsocks_server_ip"x = "$server_ip"x ];then
	                ss_basic_server="$shadowsocks_server_ip"
	        elif [ "$shadowsocks_server_ip"x != "$server_ip"x ] && [ ! -z "$server_ip" ];then
	                ss_basic_server="$server_ip"
	                export shadowsocks_server_ip="$server_ip"
	                dbus save shadowsocks
	        else
	                ss_basic_server="$ss_basic_server"
	        fi
	fi
}

flush_nat(){
	# flush and destory ipset if any
	iptables -t nat -F SHADOWSOCKS > /dev/null 2>&1
	iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS >/dev/null 2>&1
	iptables -t nat -X SHADOWSOCKS > /dev/null 2>&1
	iptables -t nat -D OUTPUT -p tcp -m set --match-set router dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	iptables -t nat -D SHADOWSOCKS -p tcp -m set --match-set black_cidr dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	# flush chromecast rule to void mutiple apply
	iptables -t nat -D PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
}

flush_ipset(){
	ipset -F router >/dev/null 2>&1
	ipset -F gfwlist >/dev/null 2>&1
	ipset -F white_domain >/dev/null 2>&1
	ipset -F black_cidr >/dev/null 2>&1
}

destory_ipset(){
	ipset -X router >/dev/null 2>&1
	ipset -X gfwlist >/dev/null 2>&1
	ipset -X white_domain >/dev/null 2>&1
	ipset -X black_cidr >/dev/null 2>&1
}

creat_ipset(){
	# Create new set
	ipset -N router iphash
	ipset -N gfwlist iphash
	ipset -N white_domain iphash
	ipset -N black_cidr nethash
}

add_black_wan_ip(){
	if [ ! -z "$ss_ipset_black_ip" ];then
		ip_format=`dbus get ss_ipset_black_ip|sed 's/,/\n/g'|grep -v "/"|sed '/\#/d'`
		cidr_format=`dbus get ss_ipset_black_ip|sed 's/,/\n/g'|grep "/"|sed '/\#/d'`
		if [ ! -z "$ip_format" ];then
			echo $(date): add your black ip into gfwlist ipset...
			for ip in $ip_format
			do
				ipset -A gfwlist $ip >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
		
		if [ ! -z "$cidr_format" ];then
			echo $(date): add your black cidr into black_cidr ipset...
			for cidr in $cidr_format
			do
				ipset -A black_cidr $cidr >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
	fi
}

apply_nat_rules(){
	ip1=$(nvram get wan0_ipaddr | cut -d"." -f1,2)
	# Create new chain
	iptables -t nat -N SHADOWSOCKS
	
	# Ignore LANs and any other addresses you'd like to bypass the proxy
	iptables -t nat -A SHADOWSOCKS -d $ss_basic_server -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d $ip1.0.0/16 -j RETURN
	
	# lan control
	black=$(echo $ss_basic_black_lan | sed "s/,/ /g")
	white=$(echo $ss_basic_white_lan | sed "s/,/ /g")
	if [ "$ss_basic_lan_control" == "1" ];then
		if [ ! -z $ss_basic_black_lan ];then
			echo $(date): appply lan black ip for lan control
			for balck_ip in $black
			do
				iptables -t nat -A SHADOWSOCKS -p tcp -s $balck_ip -j RETURN
			done
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET white_domain dst -j RETURN 
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
			echo $(date): done
			echo $(date):
		else
			echo $(date): no balck lan ip fill，do nothing
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET white_domain dst -j RETURN 
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
			echo $(date): done
			echo $(date):
		fi
	elif [ "$ss_basic_lan_control" == "2" ];then
		if [ ! -z $ss_basic_white_lan ];then
			echo $(date): appply lan white ip for lan control
			for white_ip in $white
			do	iptables -t nat -A SHADOWSOCKS -p tcp -s $white_ip -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
				iptables -t nat -A SHADOWSOCKS -p tcp -s $white_ip -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
			done
			echo $(date): done
			echo $(date):
		else
			echo $(date): no white lan ip fill，do nothing
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET white_domain dst -j RETURN 
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
			iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
			echo $(date): done
			echo $(date):
		fi
	else
		echo $(date): lan control not enabled
		iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET white_domain dst -j RETURN 
		iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
		iptables -t nat -A SHADOWSOCKS -p tcp -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
		echo $(date): done
		echo $(date):
	fi
	
	iptables -t nat -A PREROUTING -p tcp -j SHADOWSOCKS
	
	# Apply the rules for router self
	iptables -t nat -A OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333
}
	
chromecast(){
	if [ "$ss_basic_chromecast" == "1" ]; then
		echo $(date): enable lan dns take over: chromecast...
		iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	else
		echo $(date): disable lan dns take over..
		iptables -t nat -D PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	fi
}


case $1 in
start_all)
	resolv_server_ip
	flush_nat
	flush_ipset
	ipset -F router >/dev/null 2>&1
	destory_ipset
	creat_ipset
	add_black_wan_ip
	apply_nat_rules
	chromecast
	;;
add_black_wan_ip)
	flush_ipset
	add_black_wan_ip
	;;
start_part_for_addon)
	flush_nat
	chromecast
	apply_nat_rules
	;;
*)
	echo "Usage: $0 (start_all|restart_wb_list)"
	exit 1
	;;
esac
