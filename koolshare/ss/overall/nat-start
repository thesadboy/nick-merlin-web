#!/bin/sh
eval `dbus export shadowsocks`
eval `dbus export ss`
black=$(echo $ss_basic_black_lan | sed "s/,/ /g")
white=$(echo $ss_basic_white_lan | sed "s/,/ /g")
lan_ipaddr=$(nvram get lan_ipaddr)
server_ip=`resolvip $ss_basic_server`
ip1=$(nvram get wan0_ipaddr | cut -d"." -f1)
ip2=$(nvram get wan0_ipaddr | cut -d"." -f2)

# Different routers got different iptables syntax
case $(uname -m) in
  armv7l)
    MATCH_SET='--match-set'
    ;;
  mips)
    MATCH_SET='--set'
    ;;
esac

resolv_server_ip(){
	#server_ip=`resolvip $ss_basic_server`
	server_ip=`nslookup "$ss_basic_server" 114.114.114.114 | sed '1,4d' | awk '{print $3}' | grep -v :|awk 'NR==1{print}'`
	if [ -z "$shadowsocks_server_ip" ];then
	        if [ ! -z "$server_ip" ];then
	                export shadowsocks_server_ip="$server_ip"
	                ss_basic_server="$server_ip"
	                dbus save shadowsocks
	        fi
	else
	        if [ "$shadowsocks_server_ip"x = "$server_ip"x ];then
	                ss_basic_server="$shadowsocks_server_ip"
	        elif [ "$shadowsocks_server_ip"x != "$server_ip"x ] && [ ! -z "$server_ip" ];then
	                ss_basic_server="$server_ip"
	                export shadowsocks_server_ip="$server_ip"
	                dbus save shadowsocks
	        else
	                ss_basic_server="$ss_basic_server"
	        fi
	fi
}
flush_nat(){
	# flush rules if any
	iptables -t nat -F SHADOWSOCKS > /dev/null 2>&1
	iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS >/dev/null 2>&1
	iptables -t nat -X SHADOWSOCKS > /dev/null 2>&1
	iptables -t nat -D OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
}

flush_ipset(){
	ipset -F router >/dev/null 2>&1
}

destory_ipset(){
	ipset -X router >/dev/null 2>&1
}

creat_ipset(){
	ipset -N router iphash
}

apply_nat_rules(){
	ip1=$(nvram get wan0_ipaddr | cut -d"." -f1,2)
	iptables -t nat -N SHADOWSOCKS
	iptables -t nat -A SHADOWSOCKS -d $ss_basic_server -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 208.67.220.220 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 8.8.8.8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d $ip1.0.0/16 -j RETURN

	# lan control
	black=$(echo $ss_basic_black_lan | sed "s/,/\n/g")
	white=$(echo $ss_basic_white_lan | sed "s/,/\n/g")
	if [ $ss_basic_lan_control == 1 ];then
		if [ ! -z $ss_basic_black_lan ];then
			for balck_ip in $black
			do
				iptables -t nat -A SHADOWSOCKS -p tcp -s $balck_ip -j RETURN
			done
				[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 80 -j REDIRECT --to-ports 3333
				[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 443 -j REDIRECT --to-ports 3333
				[ $ss_overall_mode == 1 ] && iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 3333
		else
		[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 80 -j REDIRECT --to-ports 3333
		[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 443 -j REDIRECT --to-ports 3333
		[ $ss_overall_mode == 1 ] && iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 3333
		fi
	elif [ $ss_basic_lan_control == 2 ];then
		if [ ! -z $ss_basic_white_lan ];then
			for white_ip in $white
			do
				[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp  -s $white_ip --dport 80 -j REDIRECT --to-ports 3333
				[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp  -s $white_ip --dport 443 -j REDIRECT --to-ports 3333
				[ $ss_overall_mode == 1 ] && iptables -t nat -A SHADOWSOCKS -p tcp  -s $white_ip -j REDIRECT --to-ports 3333
			done
		else
		[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 80 -j REDIRECT --to-ports 3333
		[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 443 -j REDIRECT --to-ports 3333
		[ $ss_overall_mode == 1 ] && iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 3333
		fi
	else
		[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 80 -j REDIRECT --to-ports 3333
		[ $ss_overall_mode == 0 ] && iptables -t nat -A SHADOWSOCKS -p tcp --dport 443 -j REDIRECT --to-ports 3333
		[ $ss_overall_mode == 1 ] && iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 3333
	fi
	
	# Apply the rules
	iptables -t nat -A PREROUTING -p tcp -j SHADOWSOCKS
	iptables -t nat -A OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333
}

chromecast(){
	if [ "$ss_basic_chromecast" == "1" ]; then
		echo $(date): enable lan dns take over: chromecast...
		iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	else
		echo $(date): disable lan dns take over..
		iptables -t nat -D PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	fi
}

case $1 in
start_all)
	resolv_server_ip
	flush_nat
	flush_ipset
	destory_ipset
	creat_ipset
	apply_nat_rules
	chromecast
	;;
start_part_for_addon)
	#ss_basic_action=4
	flush_nat
	chromecast
	apply_nat_rules
	;;
*)
	echo "Usage: $0 (start_all|restart_wb_list)"
	exit 1
	;;
esac
