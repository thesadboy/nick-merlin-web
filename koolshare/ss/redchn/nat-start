#!/bin/sh
eval `dbus export shadowsocks`
eval `dbus export ss`
lan_ipaddr=$(nvram get lan_ipaddr)

# Different routers got different iptables syntax
case $(uname -m) in
  armv7l)
    MATCH_SET='--match-set'
    ;;
  mips)
    MATCH_SET='--set'
    ;;
esac

resolv_server_ip(){
	#server_ip=`resolvip $ss_basic_server`
	server_ip=`nslookup "$ss_basic_server" 114.114.114.114 | sed '1,4d' | awk '{print $3}' | grep -v :|awk 'NR==1{print}'`
	if [ -z "$shadowsocks_server_ip" ];then
	        if [ ! -z "$server_ip" ];then
	                export shadowsocks_server_ip="$server_ip"
	                ss_basic_server="$server_ip"
	                dbus save shadowsocks
	        fi
	else
	        if [ "$shadowsocks_server_ip"x = "$server_ip"x ];then
	                ss_basic_server="$shadowsocks_server_ip"
	        elif [ "$shadowsocks_server_ip"x != "$server_ip"x ] && [ ! -z "$server_ip" ];then
	                ss_basic_server="$server_ip"
	                export shadowsocks_server_ip="$server_ip"
	                dbus save shadowsocks
	        else
	                ss_basic_server="$ss_basic_server"
	        fi
	fi
}
flush_nat(){
	# flush rules and set if any
	iptables -t nat -F REDSOCKS2 > /dev/null 2>&1
	iptables -t nat -D PREROUTING -p tcp -j REDSOCKS2 >/dev/null 2>&1
	iptables -t nat -X REDSOCKS2 > /dev/null 2>&1
	iptables -t nat -D OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 1089 >/dev/null 2>&1
	iptables -t nat -D PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
}

flush_ipset(){
	#ipset -F router >/dev/null 2>&1
	#ipset -F chnroute >/dev/null 2>&1
	ipset -F white_domain >/dev/null 2>&1
	ipset -F black_domain >/dev/null 2>&1
	ipset -F white_ip >/dev/null 2>&1
	ipset -F black_ip >/dev/null 2>&1
	ipset -F white_cidr >/dev/null 2>&1
}

destory_ipset(){
	ipset -X router >/dev/null 2>&1
	ipset -X chnroute >/dev/null 2>&1
	ipset -X white_domain >/dev/null 2>&1
	ipset -X black_domain >/dev/null 2>&1
	ipset -X white_ip >/dev/null 2>&1
	ipset -X black_ip >/dev/null 2>&1
	ipset -X white_cidr >/dev/null 2>&1
}

# creat ipset rules
creat_ipset(){
	use_chnroute="/koolshare/ss/redchn/chnroute.txt"
	sed -e "s/^/-A chnroute &/g" -e "1 i\-N chnroute nethash --hashsize 81920" $use_chnroute | awk '{print $0} END{print "COMMIT"}' | ipset -R
	ipset -N router iphash
	ipset -N white_domain iphash
	ipset -N black_domain iphash
	ipset -N white_ip iphash
	ipset -N white_cidr nethash
	ipset -N black_ip iphash
}

add_white_black_ip(){
	# black ip/cidr
	if [ ! -z "$ss_redchn_wan_black_ip" ];then
		ip_format=`dbus get ss_redchn_wan_black_ip|sed 's/,/\n/g'|grep -v "/"`
		cidr_format=`dbus get ss_redchn_wan_black_ip|sed 's/,/\n/g'|grep "/"`
		if [ ! -z "$ip_format" ];then
			echo $(date): add your black ip into black_ip ipset...
			for ip in $ip_format
			do
				ipset -A black_ip $ip >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
		
		if [ ! -z "$cidr_format" ];then
			echo $(date): add your black cidr into chnroute ipset...
			for cidr in $cidr_format
			do
				ipset -A chnroute $cidr >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
	fi
	# white ip/cidr
	if [ ! -z "$ss_redchn_wan_white_ip" ];then
		ip_format=`dbus get ss_redchn_wan_white_ip|sed 's/,/\n/g'|grep -v "/"`
		cidr_format=`dbus get ss_redchn_wan_white_ip|sed 's/,/\n/g'|grep "/"`
		if [ ! -z "$ip_format" ];then
			echo $(date): add your white ip into white_ip ipset...
			for ip in $ip_format
			do
				ipset -A white_ip $ip >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
		
		if [ ! -z "$cidr_format" ];then
			echo $(date): add your white cidr into white_cidr ipset...
			for cidr in $cidr_format
			do
				ipset -A white_cidr $cidr >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
	fi
}
apply_nat_rules(){
	ip1=$(nvram get wan0_ipaddr | cut -d"." -f1,2)
	# 创建REDSOCKS2 nat rule
	iptables -t nat -N REDSOCKS2
	
	# 重定所有流量到 REDSOCKS2
	iptables -t nat -A PREROUTING -p tcp -j REDSOCKS2
	
	# default wan_blacklist 强制局域网ip，DNS ip地址不走代理
	iptables -t nat -A REDSOCKS2 -d $ss_basic_server -j RETURN
	iptables -t nat -A REDSOCKS2 -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 114.114.114.114 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 235.6.6.6 -j RETURN
	iptables -t nat -A REDSOCKS2 -d 236.6.6.6 -j RETURN
	iptables -t nat -A REDSOCKS2 -d $ip1.0.0/16 -j RETURN
	
	# IP白名单控制（不走ss）
	iptables -t nat -A REDSOCKS2 -p tcp -m set --match-set white_ip dst -j RETURN

	# cidr白名单控制（不走kcptun）
	iptables -t nat -A REDSOCKS2 -p tcp -m set --match-set white_cidr dst -j RETURN
	
	# 域名白名单控制（不走ss）
	iptables -t nat -A REDSOCKS2 -p tcp -m set $MATCH_SET white_domain dst -j RETURN

	# IP黑名单控制（走ss）
	iptables -t nat -A REDSOCKS2 -p tcp -m set $MATCH_SET black_ip dst -j REDIRECT --to-ports 1089
	
	# 域名黑名单控制（走ss）
	iptables -t nat -A REDSOCKS2 -p tcp -m set $MATCH_SET black_domain dst -j REDIRECT --to-ports 1089
	
	# router itself
	iptables -t nat -A OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 1089
	
	# lan black_white list
	black=$(echo $ss_basic_black_lan | sed "s/,/\n/g")
	white=$(echo $ss_basic_white_lan | sed "s/,/\n/g")
	
	if [ "$ss_basic_lan_control" == "1" ];then
		if [ ! -z $ss_basic_black_lan ];then
			echo $(date): appply lan black ip for lan control
			for balck_ip in $black
			do
				iptables -t nat -A REDSOCKS2 -p tcp -s $balck_ip -j RETURN
			done
			iptables -t nat -A REDSOCKS2 -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 1089
			echo $(date): done
			echo $(date):
		else
		echo $(date): no balck lan ip fill，do nothing
		iptables -t nat -A REDSOCKS2 -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 1089
		echo $(date): done
		echo $(date):
		fi
	elif [ "$ss_basic_lan_control" == "2" ];then
		if [ ! -z $ss_basic_white_lan ];then
			echo $(date): appply lan white ip for lan control
			for white_ip in $white
			do
				iptables -t nat -A REDSOCKS2 -p tcp -s $white_ip -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 1089
			done
			echo $(date): done
			echo $(date):
		else
		echo $(date): no white lan ip fill，do nothing
		iptables -t nat -A REDSOCKS2 -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 1089
		echo $(date): done
		echo $(date):
		fi
	else
		echo $(date): lan control not enabled
		iptables -t nat -A REDSOCKS2 -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 1089
		echo $(date): done
		echo $(date):
	fi
}

chromecast(){
	if [ "$ss_basic_chromecast" == "1" ]; then
		echo $(date): enable lan dns take over: chromecast...
		iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	else
		echo $(date): disable lan dns take over..
		iptables -t nat -D PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	fi
}


case $1 in
start_all)
	resolv_server_ip
	flush_nat
	flush_ipset
	ipset -F chnroute >/dev/null 2>&1
	ipset -F router >/dev/null 2>&1
	destory_ipset
	creat_ipset
	add_white_black_ip
	apply_nat_rules
	chromecast
	;;
add_new_ip)
	flush_ipset
	add_white_black_ip
	;;
start_part_for_addon)
	#ss_basic_action=4
	flush_nat
	chromecast
	apply_nat_rules
	;;
*)
	echo "Usage: $0 (start_all|restart_wb_list)"
	exit 1
	;;
esac
