#!/bin/sh
eval `dbus export KCP`
server_ip=`resolvip $KCP_basic_server`
lan_ipaddr=$(nvram get lan_ipaddr)

# Different routers got different iptables syntax
case $(uname -m) in
  armv7l)
    MATCH_SET='--match-set'
    ;;
  mips)
    MATCH_SET='--set'
    ;;
esac

flush_nat(){
	# flush rules and set if any
	iptables -t nat -D PREROUTING -p tcp -j KCPTUN >/dev/null 2>&1
	iptables -t nat -D PREROUTING -i br0 -p tcp -j KCPTUN >/dev/null 2>&1
	iptables -t nat -D OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	iptables -t nat -F OUTPUT  >/dev/null 2>&1
	iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
	iptables -t nat -F KCPTUN >/dev/null 2>&1
	iptables -t nat -X KCPTUN >/dev/null 2>&1
}

flush_ipset(){
	#ipset -F router >/dev/null 2>&1
	ipset -F chnroute >/dev/null 2>&1
	ipset -F white_domain >/dev/null 2>&1
	ipset -F black_domain >/dev/null 2>&1
	ipset -F white_ip >/dev/null 2>&1
	ipset -F black_ip >/dev/null 2>&1
	ipset -F white_cidr >/dev/null 2>&1
}

destory_ipset(){
	ipset -X router >/dev/null 2>&1
	ipset -X chnroute >/dev/null 2>&1
	ipset -X white_domain >/dev/null 2>&1
	ipset -X black_domain >/dev/null 2>&1
	ipset -X white_ip >/dev/null 2>&1
	ipset -X black_ip >/dev/null 2>&1
	ipset -X white_cidr >/dev/null 2>&1
}

creat_ispet(){
	# creat ipset rules
	use_chnroute="/koolshare/kcptun/chnmode/chnroute.txt"
	sed -e "s/^/-A chnroute &/g" -e "1 i\-N chnroute nethash --hashsize 81920" $use_chnroute | awk '{print $0} END{print "COMMIT"}' | ipset -R
	ipset -N router iphash
	ipset -N white_domain iphash
	ipset -N black_domain iphash
	ipset -N white_ip iphash
	ipset -N white_cidr nethash
	ipset -N black_ip iphash
	# black_cidr is equal to chnroute
}

add_white_black_ip(){
	# black ip/cidr
	if [ ! -z "$KCP_chnmode_wan_black_ip" ];then
		ip_format=`dbus get KCP_chnmode_wan_black_ip|sed 's/,/\n/g'|grep -v "/"`
		cidr_format=`dbus get KCP_chnmode_wan_black_ip|sed 's/,/\n/g'|grep "/"`
		if [ ! -z "$ip_format" ];then
			echo $(date): add your black ip into black_ip ipset...
			for ip in $ip_format
			do
				ipset -A black_ip $ip >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
		
		if [ ! -z "$cidr_format" ];then
			echo $(date): add your black cidr into chnroute ipset...
			for cidr in $cidr_format
			do
				ipset -A chnroute $cidr >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
	fi
	# white ip/cidr
	if [ ! -z "$KCP_chnmode_wan_white_ip" ];then
		ip_format=`dbus get KCP_chnmode_wan_white_ip|sed 's/,/\n/g'|grep -v "/"`
		cidr_format=`dbus get KCP_chnmode_wan_white_ip|sed 's/,/\n/g'|grep "/"`
		if [ ! -z "$ip_format" ];then
			echo $(date): add your white ip into white_ip ipset...
			for ip in $ip_format
			do
				ipset -A white_ip $ip >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
		
		if [ ! -z "$cidr_format" ];then
			echo $(date): add your white cidr into white_cidr ipset...
			for cidr in $cidr_format
			do
				ipset -A white_cidr $cidr >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
	fi
}

apply_nat_rules(){
	ip1=$(nvram get wan0_ipaddr | cut -d"." -f1,2)
	
	iptables -t nat -N KCPTUN
	
	# 重定所有流量到 KCPTUN
	iptables -t nat -A PREROUTING -p tcp -j KCPTUN
	
	# default wan_blacklist 强制局域网ip，DNS ip地址不走代理
	iptables -t nat -A KCPTUN -d $server_ip -j RETURN
	iptables -t nat -A KCPTUN -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A KCPTUN -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A KCPTUN -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A KCPTUN -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A KCPTUN -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A KCPTUN -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A KCPTUN -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A KCPTUN -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A KCPTUN -d 114.114.114.114 -j RETURN
	iptables -t nat -A KCPTUN -d 235.6.6.6 -j RETURN
	iptables -t nat -A KCPTUN -d 236.6.6.6 -j RETURN
	iptables -t nat -A KCPTUN -d $ip1.0.0/16 -j RETURN
	
	# IP白名单控制（不走kcptun）
	iptables -t nat -A KCPTUN -p tcp -m set --match-set white_ip dst -j RETURN

	# cidr白名单控制（不走kcptun）
	iptables -t nat -A KCPTUN -p tcp -m set --match-set white_cidr dst -j RETURN 
	
	# 域名白名单控制（不走kcptun）
	iptables -t nat -A KCPTUN -p tcp -m set $MATCH_SET white_domain dst -j RETURN 

	# IP黑名单控制（走kcptun）
	iptables -t nat -A KCPTUN -p tcp -m set $MATCH_SET black_ip dst -j REDIRECT --to-ports 3333
	
	# 域名黑名单控制（走kcptun）
	iptables -t nat -A KCPTUN -p tcp -m set $MATCH_SET black_domain dst -j REDIRECT --to-ports 3333
	
	# router itself
	iptables -t nat -A OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333
	
	# lan blacklist
	black=$(echo $KCP_basic_black_lan | sed "s/,/\n/g")
	white=$(echo $KCP_basic_white_lan | sed "s/,/\n/g")
	if [ "$KCP_basic_lan_control" == "1" ];then
		if [ ! -z $KCP_basic_black_lan ];then
			echo $(date): appply lan black ip for lan control
			for balck_ip in $black
			do
				iptables -t nat -A KCPTUN -p tcp -s $balck_ip -j RETURN
			done
			echo $(date): done
			echo $(date):
			iptables -t nat -A KCPTUN -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
		else
			echo $(date): no balck lan ip fill，do nothing
			iptables -t nat -A KCPTUN -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
			echo $(date): done
			echo $(date):
		fi
	elif [ "$KCP_basic_lan_control" == "2" ];then
		if [ ! -z $KCP_basic_white_lan ];then
			echo $(date): appply lan white ip for lan control
			for white_ip in $white
			do
				iptables -t nat -A KCPTUN -p tcp -s $white_ip -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
			done
			echo $(date): done
			echo $(date):
		else
			echo $(date): no white lan ip fill，do nothing
			iptables -t nat -A KCPTUN -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
			echo $(date): done
			echo $(date):
		fi
	else
		echo $(date): lan control not enabled
		iptables -t nat -A KCPTUN -p tcp -m set ! $MATCH_SET chnroute dst -j REDIRECT --to-ports 3333
		echo $(date): done
		echo $(date):
	fi
}


chromecast(){
	if [ "$KCP_basic_chromecast" == "1" ]; then
		echo $(date): enable lan dns take over/chromecast
		iptables -t nat -A PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	else
		echo $(date): disable lan dns take over/chromecast
		iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	fi
}

case $1 in
start_all)
	#KCP_basic_action=0 应用所有设置
	flush_nat
	flush_ipset
	ipset -F router >/dev/null 2>&1
	destory_ipset
	creat_ispet
	add_white_black_ip
	apply_nat_rules
	chromecast
	;;
add_new_ip)
	#KCP_basic_action=2 应用黑白名单
	add_white_black_ip
	;;
start_part_for_addon)
	#KCP_basic_action=3 应用所有设置
	flush_nat
	chromecast
	apply_nat_rules
	;;
*)
	echo "Usage: $0 (start_all|restart_wb_list)"
	exit 1
	;;
esac
