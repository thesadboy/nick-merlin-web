#!/bin/sh
eval `dbus export KCP`
lan_ipaddr=$(nvram get lan_ipaddr)

# Different routers got different iptables syntax
case $(uname -m) in
  armv7l)
    MATCH_SET='--match-set'
    ;;
  mips)
    MATCH_SET='--set'
    ;;
esac

flush_nat(){
	# flush and destory ipset if any
	iptables -t nat -F KCPTUN > /dev/null 2>&1
	iptables -t nat -D PREROUTING -p tcp -j KCPTUN >/dev/null 2>&1
	iptables -t nat -X KCPTUN > /dev/null 2>&1
	iptables -t nat -D OUTPUT -p tcp -m set --match-set router dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	iptables -t nat -D KCPTUN -p tcp -m set --match-set black_cidr dst -j REDIRECT --to-ports 3333 >/dev/null 2>&1
	# flush chromecast rule to void mutiple apply
	iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
}

flush_ipset(){
	#ipset -F router >/dev/null 2>&1
	ipset -F gfwlist >/dev/null 2>&1
	ipset -F white_domain >/dev/null 2>&1
	ipset -F black_cidr >/dev/null 2>&1
}

destory_ipset(){
	ipset -X router >/dev/null 2>&1
	ipset -X gfwlist >/dev/null 2>&1
	ipset -X white_domain >/dev/null 2>&1
	ipset -X black_cidr >/dev/null 2>&1
}

creat_ispet(){
	# Create new set
	ipset -N router iphash
	ipset -N gfwlist iphash
	ipset -N white_domain iphash
	ipset -N black_cidr nethash
}

add_black_wan_ip(){
	if [ ! -z "$KCP_gfwlist_black_ip" ];then
		ip_format=`dbus get KCP_gfwlist_black_ip|sed 's/,/\n/g'|grep -v "/"|sed '/\#/d'`
		cidr_format=`dbus get KCP_gfwlist_black_ip|sed 's/,/\n/g'|grep "/"|sed '/\#/d'`
		if [ ! -z "$ip_format" ];then
			echo $(date): add your black ip into gfwlist ipset...
			for ip in $ip_format
			do
				ipset -A gfwlist $ip >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
		
		if [ ! -z "$cidr_format" ];then
			echo $(date): add your black cidr into black_cidr ipset...
			for cidr in $cidr_format
			do
				ipset -A black_cidr $cidr >/dev/null 2>&1
			done
			echo $(date): done
			echo $(date):
		fi
	fi
}


apply_basic_return(){
	server_ip=`resolvip $KCP_basic_server`
	ip1=$(nvram get wan0_ipaddr | cut -d"." -f1,2)
	# Create new chain
	iptables -t nat -N KCPTUN
	# Ignore LANs and any other addresses you'd like to bypass the proxy
	iptables -t nat -A KCPTUN -d $server_ip -j RETURN
	iptables -t nat -A KCPTUN -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A KCPTUN -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A KCPTUN -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A KCPTUN -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A KCPTUN -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A KCPTUN -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A KCPTUN -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A KCPTUN -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A KCPTUN -d $ip1.0.0/16 -j RETURN
}

apply_lan_black_return(){
	#局域网黑名单（不允许这些设备走kcptun）
	black=$(echo $KCP_basic_black_lan | sed "s/,/ /g")
	for balck_ip in $black
	do
		iptables -t nat -A KCPTUN -p tcp -s $balck_ip -j RETURN
	done
}

apply_wan_white_return(){
	#域名白名单（不允许访问这些域名的时候走kcptun）
	#if [ ! -z $KCP_gfwlist_white_domain_web ];then
		iptables -t nat -A KCPTUN -p tcp -m set --match-set white_domain dst -j RETURN 
	#fi
}

apply_wan_gfwlist_redirect(){
	#gfwlist(域名黑名单)（访问这些域名的时候走kcptun）
	iptables -t nat -A KCPTUN -p tcp -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
	iptables -t nat -A KCPTUN -p tcp -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
	iptables -t nat -A PREROUTING -p tcp -j KCPTUN
}


apply_wan_gfwlist_redirect_for_some_client(){
	#gfwlist(域名黑名单)（符合局域网白名单的ip访问这些域名的时候走kcptun）
	white=$(echo $KCP_basic_white_lan | sed "s/,/ /g")
	for white_ip in $white
	do
		iptables -t nat -A KCPTUN -p tcp -s $white_ip -m set $MATCH_SET black_cidr dst -j REDIRECT --to-ports 3333
		iptables -t nat -A KCPTUN -p tcp -s $white_ip -m set $MATCH_SET gfwlist dst -j REDIRECT --to-ports 3333
	done
	iptables -t nat -A PREROUTING -p tcp -j KCPTUN
}


apply_nat_rules(){
	# lan control and white black list
	if [ "$KCP_basic_lan_control" == "1" ];then
		if [ ! -z $KCP_basic_black_lan ];then
			echo $(date): appply lan black ip for lan control
			apply_basic_return
			apply_lan_black_return
			apply_wan_white_return
			apply_wan_gfwlist_redirect
			echo $(date): done
			echo $(date):
		else
			echo $(date): no balck lan ip fill，do nothing
			apply_basic_return
			apply_wan_white_return
			apply_wan_gfwlist_redirect
			echo $(date): done
			echo $(date):
		fi
	elif [ "$KCP_basic_lan_control" == "2" ];then
		if [ ! -z $KCP_basic_white_lan ];then
			echo $(date): appply lan white ip for lan control
			apply_basic_return
			apply_wan_white_return
			apply_wan_gfwlist_redirect_for_some_client
			echo $(date): done
			echo $(date):
		else
			echo $(date): no white lan ip fill，do nothing
			apply_basic_return
			apply_wan_white_return
			apply_wan_gfwlist_redirect
			echo $(date): done
			echo $(date):
		fi
	else
		echo $(date): lan control not enabled
		apply_basic_return
		apply_wan_white_return
		apply_wan_gfwlist_redirect
		echo $(date): done
		echo $(date):
	fi
	# Apply the rules for router self
	iptables -t nat -A OUTPUT -p tcp -m set $MATCH_SET router dst -j REDIRECT --to-ports 3333
}


chromecast(){
	if [ "$KCP_basic_chromecast" == "1" ]; then
		echo $(date): enable lan dns take over/chromecast...
		iptables -t nat -A PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	else
		echo $(date): disable lan dns take over/chromecast
		iptables -t nat -D PREROUTING -s $lan_ipaddr/24 -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		echo $(date): done
		echo $(date):
	fi
}


case $1 in
start_all)
	#KCP_basic_action=0 应用所有设置
	flush_nat
	flush_ipset
	ipset -F router >/dev/null 2>&1
	destory_ipset
	creat_ispet
	add_black_wan_ip
	apply_nat_rules
	chromecast
	;;
add_black_wan_ip)
	#KCP_basic_action=2
	flush_ipset
	add_black_wan_ip
	;;
start_part_for_addon)
	#KCP_basic_action=3 应用所有设置
	flush_nat
	chromecast
	apply_nat_rules
	;;
*)
	echo "Usage: $0 (start_all|restart_wb_list)"
	exit 1
	;;
esac